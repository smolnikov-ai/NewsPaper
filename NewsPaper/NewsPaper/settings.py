"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from dotenv import load_dotenv
from pathlib import Path
import logging

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'django_apscheduler',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.yandex',
    'accounts',
    'fpages',
    'news.apps.NewsConfig',
]

SITE_ID = 1

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/account/index/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_FORMS = {'signup': 'accounts.forms.CommonSignupForm'}

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_SSL = True
SITE_URL = 'http://127.0.0.1:8000'
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# формат даты, которую будет воспринимать наш задачник (вспоминаем модуль по фильтрам)
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

# настройки для Celery и Redis
# указывает на URL брокера сообщений (Redis). По умолчанию он находится на порту 6379
CELERY_BROKER_URL = 'redis://localhost:6379'
# указываеv на хранилище результатов выполнения задач
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
#допустимый формат данных
CELERY_ACCEPT_CONTENT = ['application/json']
#метод сериализации задач
CELERY_TASK_SERIALIZER = 'json'
#метод сериализации результатов
CELERY_RESULT_SERIALIZER = 'json'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}

# логирование, необходимо выполнить import logging

# Получаем экземпляр логгера
logger = logging.getLogger('django')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'style': '{',
    # определяем формат записи сообщений:
    # %(asctime)s - время возникновения сообщения
    # %(levelname)s - уровень логирования
    # %(message)s - сообщение
    # %(pathname)s - путь к источнику события (сообщения)
    # %(exc_info)s - стек ошибки
    # %(module)s - модуль-источник сообщения
    # %(process)d - процесс в котором возникло сообщение
    # %(thread)d - поток в котором возникло сообщение
    'formatters': {
        # ключ (название) форматтера, который используется в handlers
        'console_debug': {
            'format': '%(asctime)s %(levelname)s %(message)s',
            'datefmt': '%d-%m-%Y %H:%M:%S',
        },
        'console_warning': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s',
            'datefmt': '%d-%m-%Y %H:%M:%S',
        },
        'console_error': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s',
            'datefmt': '%d-%m-%Y %H:%M:%S',
        },
        'general': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
            'datefmt': '%d-%m-%Y %H:%M:%S',
        },
        'error': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s',
            'datefmt': '%d-%m-%Y %H:%M:%S',
        },
        'security': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
            'datefmt': '%d-%m-%Y %H:%M:%S',
        },
        'email': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s',
            'datefmt': '%d-%m-%Y %H:%M:%S',
        },
    },
    # Определяем фильтры, которые пропускают записи только в случае, когда DEBUG = False, DEBUG = True
    'filters': {
        # ключ (название) фильтра, который используется в handlers
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # Определяем обработчики
    'handlers': {
        # Ключ (название) обработчика (хендлера), который используется в loggers
        'console_debug': {
            # Отправляет сообщения уровня DEBUG и выше в консоль - ключ class
            # уровни логирования (снизу вверх) DEBUG -> INFO -> WARNING -> ERROR -> CRITICAL
            'level': 'DEBUG',
            # Накладывает фильтр, определенный выше, который пропускает записи только в случае, когда DEBUG = True
            'filters': ['require_debug_true',],
            # Определяем куда будут уходить сообщения - в консоль
            'class': 'logging.StreamHandler',
            # Определяем формат вывода сообщения
            'formatter': 'console_debug',
        },
        'console_warning': {
            'level': 'WARNING',
            'filters': ['require_debug_true',],
            'class': 'logging.StreamHandler',
            'formatter': 'console_warning',
        },
        'console_error': {
            'level': 'ERROR',
            'filters': ['require_debug_true',],
            'class': 'logging.StreamHandler',
            'formatter': 'console_error',
        },
        'general': {
            'level': 'INFO',
            'filters': ['require_debug_false',],
            # Отправляет сообщения в файл лога
            'class': 'logging.FileHandler',
            'filename': 'logs/general.log',
            'formatter': 'general',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/errors.log',
            'formatter': 'error',
        },
        'security': {
            'class': 'logging.FileHandler',
            'filename': 'logs/security.log',
            'formatter': 'security',
        },
        'email_error': {
            'level': 'ERROR',
            'filters': ['require_debug_false',],
            # Отправляет сообщения на почту
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'email',
        },
    },
    # Определяем регистраторы (loggers)
    'loggers': {
        # Название регистратора. Использованы собственные регистраторы django
        'django': {
            # Указываем обработчики, отправляющие сообщения в соответствии со своими настройками
            'handlers': ['console_debug', 'console_warning', 'console_error', 'general',],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['error', 'email_error',],
            # Указываем уровень сообщения, которые будут отправляться
            'level': 'ERROR',
            # Если 'propagate': True - дочерний логгер django.request передаёт все запросы на ведение журнала
            # родительскому логгеру django
            'propagate': True,
        },
        'django.server': {
            'handlers': ['error', 'email_error',],
            'level': 'ERROR',
            'propagate': True,
        },
        'django_template': {
            'handlers': ['error',],
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['error',],
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security',],
            'propagate': True,
        },
    },
}